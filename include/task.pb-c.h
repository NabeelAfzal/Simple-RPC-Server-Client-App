/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_task_2eproto__INCLUDED
#define PROTOBUF_C_task_2eproto__INCLUDED

#include <google/protobuf-c/protobuf-c.h>

PROTOBUF_C_BEGIN_DECLS


typedef struct _Task__Input Task__Input;
typedef struct _Task__Output Task__Output;


/* --- enums --- */


/* --- messages --- */

struct  _Task__Input
{
  ProtobufCMessage base;
  int32_t a;
  int32_t b;
  int32_t c;
};
#define TASK__INPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task__input__descriptor) \
    , 0, 0, 0 }


struct  _Task__Output
{
  ProtobufCMessage base;
  int32_t sum;
  int32_t product;
};
#define TASK__OUTPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&task__output__descriptor) \
    , 0, 0 }


/* Task__Input methods */
void   task__input__init
                     (Task__Input         *message);
size_t task__input__get_packed_size
                     (const Task__Input   *message);
size_t task__input__pack
                     (const Task__Input   *message,
                      uint8_t             *out);
size_t task__input__pack_to_buffer
                     (const Task__Input   *message,
                      ProtobufCBuffer     *buffer);
Task__Input *
       task__input__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task__input__free_unpacked
                     (Task__Input *message,
                      ProtobufCAllocator *allocator);
/* Task__Output methods */
void   task__output__init
                     (Task__Output         *message);
size_t task__output__get_packed_size
                     (const Task__Output   *message);
size_t task__output__pack
                     (const Task__Output   *message,
                      uint8_t             *out);
size_t task__output__pack_to_buffer
                     (const Task__Output   *message,
                      ProtobufCBuffer     *buffer);
Task__Output *
       task__output__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   task__output__free_unpacked
                     (Task__Output *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Task__Input_Closure)
                 (const Task__Input *message,
                  void *closure_data);
typedef void (*Task__Output_Closure)
                 (const Task__Output *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Task__Process_Service Task__Process_Service;
struct _Task__Process_Service
{
  ProtobufCService base;
  void (*add)(Task__Process_Service *service,
              const Task__Input *input,
              Task__Output_Closure closure,
              void *closure_data);
  void (*multiply)(Task__Process_Service *service,
                   const Task__Input *input,
                   Task__Output_Closure closure,
                   void *closure_data);
};
typedef void (*Task__Process_ServiceDestroy)(Task__Process_Service *);
void task__process__init (Task__Process_Service *service,
                          Task__Process_ServiceDestroy destroy);
#define TASK__PROCESS__BASE_INIT \
    { &task__process__descriptor, protobuf_c_service_invoke_internal, NULL }
#define TASK__PROCESS__INIT(function_prefix__) \
    { TASK__PROCESS__BASE_INIT,\
      function_prefix__ ## add,\
      function_prefix__ ## multiply  }
void task__process__add(ProtobufCService *service,
                        const Task__Input *input,
                        Task__Output_Closure closure,
                        void *closure_data);
void task__process__multiply(ProtobufCService *service,
                             const Task__Input *input,
                             Task__Output_Closure closure,
                             void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor task__input__descriptor;
extern const ProtobufCMessageDescriptor task__output__descriptor;
extern const ProtobufCServiceDescriptor task__process__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_task_2eproto__INCLUDED */
